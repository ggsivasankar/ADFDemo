{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "asaworkspaceu6yr2x0"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDataLakeStorage2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage2'"
		},
		"AzureSynapseAnalytics1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseAnalytics1'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=asaworkspaceu6yr2x0.sql.azuresynapse.net;Initial Catalog=sqlpool01"
		},
		"CosmosDBLSCustomerProfile_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDBLSCustomerProfile'"
		},
		"CosmosDbNoSql1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDbNoSql1'"
		},
		"asadatalakeu6yr2x0_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'asadatalakeu6yr2x0'"
		},
		"asastoreu6yr2x0_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asastoreu6yr2x0'"
		},
		"asaworkspaceu6yr2x0-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asaworkspaceu6yr2x0-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:asaworkspaceu6yr2x0.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"linkedService1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedService1'"
		},
		"sqlpool01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlpool01'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=asaworkspaceu6yr2x0.sql.azuresynapse.net;Initial Catalog=SQLPool01;User ID=asa.sql.admin"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asadatalakeu6yr2x0.dfs.core.windows.net/"
		},
		"AzureDataLakeStorage2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asadatalakeu6yr2x0.dfs.core.windows.net/"
		},
		"asadatalakeu6yr2x0_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asadatalakeu6yr2x0.dfs.core.windows.net"
		},
		"asakeyvaultu6yr2x0_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://asakeyvaultu6yr2x0.vault.azure.net/"
		},
		"asaworkspaceu6yr2x0-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asadatalakeu6yr2x0.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/AlterRow')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow4",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "asaworkspaceu6yr2x0-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-05T14:19:55Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dataflow4')]",
				"[concat(variables('workspaceId'), '/linkedServices/asaworkspaceu6yr2x0-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Foreach')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.OutputFolders",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Parquet1",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "outputlink",
											"type": "DatasetReference",
											"parameters": {
												"folderName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"OutputFolders": {
						"type": "array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-26T16:00:58Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Parquet1')]",
				"[concat(variables('workspaceId'), '/datasets/outputlink')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://asakeyvaultu6yr2x0.vault.azure.net/secrets/PipelineSecret/ade1eb698287467681bc26f403b523fe?api-version=7.1",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {},
							"httpRequestTimeout": "00:01:00",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SecretValue",
							"value": {
								"value": "@activity('Web1').output.value",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SecretValue": {
						"type": "String",
						"defaultValue": "@activity('Web1').output.value"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-24T18:01:52Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Notebook 5",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Notebook 5",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "SparkPool01",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": "Small",
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-27T14:29:20Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Notebook 5')]",
				"[concat(variables('workspaceId'), '/bigDataPools/SparkPool01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 3')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://dummy.restapiexample.com/api/v1/employees",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-27T17:37:16Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 4')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(variables('fileAvailable'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "outputlink",
											"type": "DatasetReference",
											"parameters": {
												"folderName": "output2"
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(activity('Get Metadata1').output.exists)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 120
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "fileAvailable",
													"value": "true"
												}
											}
										]
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Until1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Parquet1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "outputlink",
								"type": "DatasetReference",
								"parameters": {
									"folderName": "output4"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"fileAvailable": {
						"type": "String",
						"defaultValue": "false"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-27T18:09:38Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Parquet1')]",
				"[concat(variables('workspaceId'), '/datasets/outputlink')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 5')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Aggr",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "aggr",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emp1": {},
									"dep1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-03T07:04:35Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/aggr')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 6wait')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Notebook 3",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Notebook 3",
								"type": "NotebookReference"
							},
							"parameters": {
								"runId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"snapshot": true,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-26T11:30:39Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Notebook 3')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline3')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Notebook 4",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Notebook 4",
								"type": "NotebookReference"
							},
							"parameters": {
								"runId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"snapshot": true,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-26T12:06:02Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Notebook 4')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline5')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Notebook 5",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Notebook 5",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-27T12:06:27Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Notebook 5')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline6')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Notebook1",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Notebook 2",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-27T14:09:27Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Notebook 2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TestPipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://asakeyvaultu6yr2x0.vault.azure.net/secrets/PipelineSecret/ade1eb698287467681bc26f403b523fe?api-version=7.1",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {},
							"httpRequestTimeout": "00:01:00",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SecretValue",
							"value": {
								"value": "@activity('Web1').output.value",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SecretValue": {
						"type": "String",
						"defaultValue": "IsNotASecret"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-24T18:35:41Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Write Campaign Analytics to ASA')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "asal400_lab2_writecampaignanalyticstoasa",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "asal400_lab2_writecampaignanalyticstoasa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CampaignAnalytics": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "linkedService1",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-02T03:36:38Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/asal400_lab2_writecampaignanalyticstoasa')]",
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cond')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emp1": {},
									"ITsink": {},
									"HRsink": {},
									"PAYsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-03T11:40:14Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dataflow3')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataflow')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empdat": {},
									"depdata": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-02T17:57:18Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/derived')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "derived",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empdata": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-03T12:06:52Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/derived')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/executedataflow2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "executedataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emp": {},
									"payrollemp": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-02T17:41:36Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dataflow2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/filter')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ArrayofValues",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(item(),3)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ArrayofValues": {
						"type": "array",
						"defaultValue": [
							1,
							2,
							3,
							4,
							5,
							6
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-27T13:58:23Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ifcon')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(pipeline().parameters.copytooutput1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Parquet1",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "outputlink",
											"type": "DatasetReference",
											"parameters": {
												"folderName": {
													"value": "@pipeline().parameters.output2folder",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Parquet1",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "outputlink",
											"type": "DatasetReference",
											"parameters": {
												"folderName": {
													"value": "@pipeline().parameters.output1folder",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"copytooutput1": {
						"type": "string",
						"defaultValue": "true"
					},
					"output1folder": {
						"type": "string",
						"defaultValue": "output1"
					},
					"output2folder": {
						"type": "string",
						"defaultValue": "output2"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-26T18:10:17Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Parquet1')]",
				"[concat(variables('workspaceId'), '/datasets/outputlink')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/lookUp')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "lookup",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Parquet1",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "outputlink",
											"type": "DatasetReference",
											"parameters": {
												"folderName": {
													"value": "@item().Prop_0",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-26T17:42:53Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/lookup')]",
				"[concat(variables('workspaceId'), '/datasets/Parquet1')]",
				"[concat(variables('workspaceId'), '/datasets/outputlink')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/metadata')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "outputlink",
								"type": "DatasetReference",
								"parameters": {
									"folderName": "output2"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-27T02:15:25Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/outputlink')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/switch')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.folderName",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "output1",
									"activities": [
										{
											"name": "Copy data1",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "ParquetSource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "Parquet1",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "outputpath",
													"type": "DatasetReference",
													"parameters": {
														"folder": {
															"value": "@pipeline().parameters.folderName",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "output2",
									"activities": [
										{
											"name": "Copy data2",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "ParquetSource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "Parquet1",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "outputpath",
													"type": "DatasetReference",
													"parameters": {
														"folder": {
															"value": "@pipeline().parameters.folderName",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"folderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-01T13:31:18Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Parquet1')]",
				"[concat(variables('workspaceId'), '/datasets/outputpath')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/systemvar')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Parquet1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "outputlink",
								"type": "DatasetReference",
								"parameters": {
									"folderName": "output2"
								}
							}
						]
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_sysdac_add_instance]",
							"storedProcedureParameters": {
								"ADFNAME": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									}
								},
								"RUNID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									}
								},
								"TRIGGERTIME": {
									"value": {
										"value": "@pipeline().parameters.Executiondate",
										"type": "Expression"
									}
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "asaworkspaceu6yr2x0-WorkspaceDefaultSqlServer",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Executiondate": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-01T12:19:07Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Parquet1')]",
				"[concat(variables('workspaceId'), '/datasets/outputlink')]",
				"[concat(variables('workspaceId'), '/linkedServices/asaworkspaceu6yr2x0-WorkspaceDefaultSqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalyticsTable1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "empid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "country",
						"type": "nvarchar"
					},
					{
						"name": "department",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "table1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalyticstestTable1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "wwi",
					"table": "campaign_new"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CosmosDbNoSqlContainer1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDBLSCustomerProfile",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {},
				"typeProperties": {
					"collectionName": "OnlineUserProfile01"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CosmosDBLSCustomerProfile')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CosmosDbNoSqlContainer2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDBLSCustomerProfile",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {},
				"typeProperties": {
					"collectionName": "OnlineUserProfile01"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/CosmosDBLSCustomerProfile')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "depid",
						"type": "String"
					},
					{
						"name": "depname",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Parquet1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asaworkspaceu6yr2x0-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sale-small-20160930-snappy.parquet",
						"folderPath": "sale-small/Year=2016/Quarter=Q3/Month=9/Day=20160930",
						"fileSystem": "wwi-02"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "TransactionId",
						"type": "UTF8"
					},
					{
						"name": "CustomerId",
						"type": "INT32"
					},
					{
						"name": "ProductId",
						"type": "INT_16"
					},
					{
						"name": "Quantity",
						"type": "INT_8"
					},
					{
						"name": "Price",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "TotalAmount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "TransactionDate",
						"type": "INT32"
					},
					{
						"name": "ProfitAmount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Hour",
						"type": "INT_8"
					},
					{
						"name": "Minute",
						"type": "INT_8"
					},
					{
						"name": "StoreId",
						"type": "INT_16"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asaworkspaceu6yr2x0-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_campaign_analytics_source')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asadatalakeu6yr2x0",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "campaignanalytics.csv",
						"folderPath": "campaign-analytics",
						"fileSystem": "wwi-02"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalakeu6yr2x0')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_ecommerce_userprofiles_source')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asadatalakeu6yr2x0",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online-user-profiles-02",
						"fileSystem": "wwi-02"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"visitorId": {
							"type": "integer"
						},
						"topProductPurchases": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"productId": {
										"type": "integer"
									},
									"itemsPurchasedLast12Months": {
										"type": "integer"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalakeu6yr2x0')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_wwi_campaign_analytics_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "ProductCategory",
						"type": "nvarchar"
					},
					{
						"name": "CampaignName",
						"type": "nvarchar"
					},
					{
						"name": "Revenue",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "RevenueTarget",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "State",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "CampaignAnalytics"
				},
				"sqlPool": {
					"referenceName": "sql001",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/sql001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_wwi_campaign_analytics_asa1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "ProductCategory",
						"type": "nvarchar"
					},
					{
						"name": "CampaignName",
						"type": "nvarchar"
					},
					{
						"name": "Revenue",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "RevenueTarget",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "State",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "WWI",
					"table": "CampaignAnalytics1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSynapseAnalytics1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_wwi_usertopproductpurchases_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [
					{
						"name": "UserId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ItemsPurchasedLast12Months",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IsTopProduct",
						"type": "bit"
					},
					{
						"name": "IsPreferredProduct",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "UserTopProductPurchases"
				},
				"sqlPool": {
					"referenceName": "sql001",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/sql001')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/depinput')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asadatalakeu6yr2x0",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dep.csv",
						"fileSystem": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "depid",
						"type": "String"
					},
					{
						"name": "depname",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalakeu6yr2x0')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/empdata')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asadatalakeu6yr2x0",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "emp.csv",
						"fileSystem": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalakeu6yr2x0')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/empinput')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "emp.csv",
						"fileSystem": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "countr",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/lookup')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asastoreu6yr2x0",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "file1.csv",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asastoreu6yr2x0')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/output')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asadatalakeu6yr2x0",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output8",
						"fileSystem": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PAR1\u0015\u0000\u0015*\u0015.",
						"type": "String"
					},
					{
						"name": "\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00003\u0015\u0000\u0015B\u0015F",
						"type": "String"
					},
					{
						"name": "\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u0004raju\u0018\u0005asmin\u0000\u0000\u0000!�\u0002\u0000\u0000\u0000\u0003\u0007\u0006\u0000\u0000\u0000maheer\u0005\u0000\u0000\u0000asmin\u0004\u0000\u0000\u0000raju\u0015\u0004\u0015\u0012\u0015\u0016L\u0015\u0002\u0015\u0004\u0000\u0000\t \u0005\u0000\u0000\u0000india\u0015\u0000\u0015\u0010\u0015\u0014",
						"type": "String"
					},
					{
						"name": "\u0015\u0006\u0015\u0004\u0015\u0006\u0015\b\u001c\u0018\u0005india\u0018\u0005india\u0016\u0000(\u0005india\u0018\u0005india\u0000\u0000\u0000\b\u001c\u0002\u0000\u0000\u0000\u0003\u0007\u0000\u0003\u0015\u0000\u0015*\u0015.",
						"type": "String"
					},
					{
						"name": "\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00003\u0015\u0000\u0015*\u0015.",
						"type": "String"
					},
					{
						"name": "\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00003\u0015\u0000\u0015:\u0015:",
						"type": "String"
					},
					{
						"name": "\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u0007payroll\u0018\u0002HR\u0000\u0000\u0000\u001d\u0014\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0006\u0004HR\u0001\u00060IT\u0007\u0000\u0000\u0000payroll\u0015\u0002\u0019|H\fspark_schema\u0015\f\u0000\u0015\f%\u0002\u0018\u0005empid%\u0000\u0000\u0015\f%\u0002\u0018\u0004name%\u0000\u0000\u0015\f%\u0002\u0018\u0006countr%\u0000\u0000\u0015\f%\u0002\u0018",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalakeu6yr2x0')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/outputcsv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asadatalakeu6yr2x0",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "out5",
						"fileSystem": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalakeu6yr2x0')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/outputlink')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asastoreu6yr2x0",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().folderName",
							"type": "Expression"
						},
						"container": "output"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asastoreu6yr2x0')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/outputpath')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"container": "output"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage2_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalytics1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseAnalytics1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CosmosDBLSCustomerProfile')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDBLSCustomerProfile_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CosmosDbNoSql1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDbNoSql1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asadatalakeu6yr2x0')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('asadatalakeu6yr2x0_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('asadatalakeu6yr2x0_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asakeyvaultu6yr2x0')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('asakeyvaultu6yr2x0_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asastoreu6yr2x0')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('asastoreu6yr2x0_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asaworkspaceu6yr2x0-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('asaworkspaceu6yr2x0-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asaworkspaceu6yr2x0-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('asaworkspaceu6yr2x0-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/linkedService1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedService1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvaultu6yr2x0",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvaultu6yr2x0')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Trigger 1')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "systemvar",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2023-03-08T12:11:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/systemvar')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureIntegrationRuntime01')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "MemoryOptimized",
							"coreCount": 16,
							"timeToLive": 60
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empinput",
								"type": "DatasetReference"
							},
							"name": "empdat"
						},
						{
							"dataset": {
								"referenceName": "depinput",
								"type": "DatasetReference"
							},
							"name": "depdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          countr as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empdat",
						"source(output(",
						"          depid as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> depdata",
						"empdat, depdata join(department == depid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {PAR1\u0015\u0000\u0015*\u0015.} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00003\u0015\u0000\u0015B\u0015F} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u0004raju\u0018\u0005asmin\u0000\u0000\u0000!�\u0002\u0000\u0000\u0000\u0003\u0007\u0006\u0000\u0000\u0000maheer\u0005\u0000\u0000\u0000asmin\u0004\u0000\u0000\u0000raju\u0015\u0004\u0015\u0012\u0015\u0016L\u0015\u0002\u0015\u0004\u0000\u0000      \u0005\u0000\u0000\u0000india\u0015\u0000\u0015\u0010\u0015\u0014} as string,",
						"          {\u0015\u0006\u0015\u0004\u0015\u0006\u0015\b\u001c\u0018\u0005india\u0018\u0005india\u0016\u0000(\u0005india\u0018\u0005india\u0000\u0000\u0000\b\u001c\u0002\u0000\u0000\u0000\u0003\u0007\u0000\u0003\u0015\u0000\u0015*\u0015.} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00003\u0015\u0000\u0015*\u0015.} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00003\u0015\u0000\u0015:\u0015:} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u0007payroll\u0018\u0002HR\u0000\u0000\u0000\u001d\u0014\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0006\u0004HR\u0001\u00060IT\u0007\u0000\u0000\u0000payroll\u0015\u0002\u0019|H\fspark_schema\u0015\f\u0000\u0015\f%\u0002\u0018\u0005empid%\u0000\u0000\u0015\f%\u0002\u0018\u0004name%\u0000\u0000\u0015\f%\u0002\u0018\u0006countr%\u0000\u0000\u0015\f%\u0002\u0018} as string",
						"     ),",
						"     partitionFileNames:['out.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          empid,",
						"          name,",
						"          countr,",
						"          depname",
						"     ),",
						"     partitionBy('hash', 1),",
						"     format: 'parquet') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/empinput')]",
				"[concat(variables('workspaceId'), '/datasets/depinput')]",
				"[concat(variables('workspaceId'), '/datasets/output')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow2')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empinput",
								"type": "DatasetReference"
							},
							"name": "emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "output",
								"type": "DatasetReference"
							},
							"name": "payrollemp"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          countr as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> emp",
						"emp filter(department=='HR') ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {PAR1\u0015\u0000\u0015*\u0015.} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00003\u0015\u0000\u0015B\u0015F} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u0004raju\u0018\u0005asmin\u0000\u0000\u0000!�\u0002\u0000\u0000\u0000\u0003\u0007\u0006\u0000\u0000\u0000maheer\u0005\u0000\u0000\u0000asmin\u0004\u0000\u0000\u0000raju\u0015\u0004\u0015\u0012\u0015\u0016L\u0015\u0002\u0015\u0004\u0000\u0000      \u0005\u0000\u0000\u0000india\u0015\u0000\u0015\u0010\u0015\u0014} as string,",
						"          {\u0015\u0006\u0015\u0004\u0015\u0006\u0015\b\u001c\u0018\u0005india\u0018\u0005india\u0016\u0000(\u0005india\u0018\u0005india\u0000\u0000\u0000\b\u001c\u0002\u0000\u0000\u0000\u0003\u0007\u0000\u0003\u0015\u0000\u0015*\u0015.} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00003\u0015\u0000\u0015*\u0015.} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00003\u0015\u0000\u0015:\u0015:} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u0007payroll\u0018\u0002HR\u0000\u0000\u0000\u001d\u0014\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0006\u0004HR\u0001\u00060IT\u0007\u0000\u0000\u0000payroll\u0015\u0002\u0019|H\fspark_schema\u0015\f\u0000\u0015\f%\u0002\u0018\u0005empid%\u0000\u0000\u0015\f%\u0002\u0018\u0004name%\u0000\u0000\u0015\f%\u0002\u0018\u0006countr%\u0000\u0000\u0015\f%\u0002\u0018} as string",
						"     ),",
						"     partitionFileNames:['payout.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> payrollemp"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/empinput')]",
				"[concat(variables('workspaceId'), '/datasets/output')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow3')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empinput",
								"type": "DatasetReference"
							},
							"name": "emp1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "output",
								"type": "DatasetReference"
							},
							"name": "ITsink"
						},
						{
							"dataset": {
								"referenceName": "output",
								"type": "DatasetReference"
							},
							"name": "HRsink"
						},
						{
							"dataset": {
								"referenceName": "output",
								"type": "DatasetReference"
							},
							"name": "PAYsink"
						}
					],
					"transformations": [
						{
							"name": "splitbasedondepartment"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          countr as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> emp1",
						"emp1 split(equals(department, '1'),",
						"     equals(department, '2'),",
						"     equals(department, '3'),",
						"     disjoint: false) ~> splitbasedondepartment@(ITEMP, HREMP, PAYROLLEMP, OTHEREMP)",
						"splitbasedondepartment@ITEMP sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {PAR1\u0015\u0000\u0015*\u0015.} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00003\u0015\u0000\u0015B\u0015F} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u0004raju\u0018\u0005asmin\u0000\u0000\u0000!�\u0002\u0000\u0000\u0000\u0003\u0007\u0006\u0000\u0000\u0000maheer\u0005\u0000\u0000\u0000asmin\u0004\u0000\u0000\u0000raju\u0015\u0004\u0015\u0012\u0015\u0016L\u0015\u0002\u0015\u0004\u0000\u0000      \u0005\u0000\u0000\u0000india\u0015\u0000\u0015\u0010\u0015\u0014} as string,",
						"          {\u0015\u0006\u0015\u0004\u0015\u0006\u0015\b\u001c\u0018\u0005india\u0018\u0005india\u0016\u0000(\u0005india\u0018\u0005india\u0000\u0000\u0000\b\u001c\u0002\u0000\u0000\u0000\u0003\u0007\u0000\u0003\u0015\u0000\u0015*\u0015.} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00003\u0015\u0000\u0015*\u0015.} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00003\u0015\u0000\u0015:\u0015:} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u0007payroll\u0018\u0002HR\u0000\u0000\u0000\u001d\u0014\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0006\u0004HR\u0001\u00060IT\u0007\u0000\u0000\u0000payroll\u0015\u0002\u0019|H\fspark_schema\u0015\f\u0000\u0015\f%\u0002\u0018\u0005empid%\u0000\u0000\u0015\f%\u0002\u0018\u0004name%\u0000\u0000\u0015\f%\u0002\u0018\u0006countr%\u0000\u0000\u0015\f%\u0002\u0018} as string",
						"     ),",
						"     partitionFileNames:['itemp.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ITsink",
						"splitbasedondepartment@HREMP sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {PAR1\u0015\u0000\u0015*\u0015.} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00003\u0015\u0000\u0015B\u0015F} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u0004raju\u0018\u0005asmin\u0000\u0000\u0000!�\u0002\u0000\u0000\u0000\u0003\u0007\u0006\u0000\u0000\u0000maheer\u0005\u0000\u0000\u0000asmin\u0004\u0000\u0000\u0000raju\u0015\u0004\u0015\u0012\u0015\u0016L\u0015\u0002\u0015\u0004\u0000\u0000      \u0005\u0000\u0000\u0000india\u0015\u0000\u0015\u0010\u0015\u0014} as string,",
						"          {\u0015\u0006\u0015\u0004\u0015\u0006\u0015\b\u001c\u0018\u0005india\u0018\u0005india\u0016\u0000(\u0005india\u0018\u0005india\u0000\u0000\u0000\b\u001c\u0002\u0000\u0000\u0000\u0003\u0007\u0000\u0003\u0015\u0000\u0015*\u0015.} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00003\u0015\u0000\u0015*\u0015.} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00003\u0015\u0000\u0015:\u0015:} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u0007payroll\u0018\u0002HR\u0000\u0000\u0000\u001d\u0014\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0006\u0004HR\u0001\u00060IT\u0007\u0000\u0000\u0000payroll\u0015\u0002\u0019|H\fspark_schema\u0015\f\u0000\u0015\f%\u0002\u0018\u0005empid%\u0000\u0000\u0015\f%\u0002\u0018\u0004name%\u0000\u0000\u0015\f%\u0002\u0018\u0006countr%\u0000\u0000\u0015\f%\u0002\u0018} as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> HRsink",
						"splitbasedondepartment@PAYROLLEMP sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {PAR1\u0015\u0000\u0015*\u0015.} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00003\u0015\u0000\u0015B\u0015F} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u0004raju\u0018\u0005asmin\u0000\u0000\u0000!�\u0002\u0000\u0000\u0000\u0003\u0007\u0006\u0000\u0000\u0000maheer\u0005\u0000\u0000\u0000asmin\u0004\u0000\u0000\u0000raju\u0015\u0004\u0015\u0012\u0015\u0016L\u0015\u0002\u0015\u0004\u0000\u0000      \u0005\u0000\u0000\u0000india\u0015\u0000\u0015\u0010\u0015\u0014} as string,",
						"          {\u0015\u0006\u0015\u0004\u0015\u0006\u0015\b\u001c\u0018\u0005india\u0018\u0005india\u0016\u0000(\u0005india\u0018\u0005india\u0000\u0000\u0000\b\u001c\u0002\u0000\u0000\u0000\u0003\u0007\u0000\u0003\u0015\u0000\u0015*\u0015.} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00003\u0015\u0000\u0015*\u0015.} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00003\u0015\u0000\u0015:\u0015:} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u0007payroll\u0018\u0002HR\u0000\u0000\u0000\u001d\u0014\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0006\u0004HR\u0001\u00060IT\u0007\u0000\u0000\u0000payroll\u0015\u0002\u0019|H\fspark_schema\u0015\f\u0000\u0015\f%\u0002\u0018\u0005empid%\u0000\u0000\u0015\f%\u0002\u0018\u0004name%\u0000\u0000\u0015\f%\u0002\u0018\u0006countr%\u0000\u0000\u0015\f%\u0002\u0018} as string",
						"     ),",
						"     partitionFileNames:['payout.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> PAYsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/empinput')]",
				"[concat(variables('workspaceId'), '/datasets/output')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow4')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empinput",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          countr as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 alterRow(deleteIf(department=='2'),",
						"     updateIf(department=='3')) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          empid as integer,",
						"          name as string,",
						"          country as string,",
						"          department as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          empid,",
						"          name,",
						"          country = countr,",
						"          department",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/empinput')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticsTable1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/aggr')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empinput",
								"type": "DatasetReference"
							},
							"name": "emp1"
						},
						{
							"dataset": {
								"referenceName": "depinput",
								"type": "DatasetReference"
							},
							"name": "dep1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregateondep"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          countr as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> emp1",
						"source(output(",
						"          depid as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dep1",
						"emp1 aggregate(groupBy(department),",
						"     Totalemployees = count(empid)) ~> aggregateondep",
						"aggregateondep, dep1 join(department == depid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {PAR1\u0015\u0000\u0015*\u0015.} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00003\u0015\u0000\u0015B\u0015F} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u0004raju\u0018\u0005asmin\u0000\u0000\u0000!�\u0002\u0000\u0000\u0000\u0003\u0007\u0006\u0000\u0000\u0000maheer\u0005\u0000\u0000\u0000asmin\u0004\u0000\u0000\u0000raju\u0015\u0004\u0015\u0012\u0015\u0016L\u0015\u0002\u0015\u0004\u0000\u0000      \u0005\u0000\u0000\u0000india\u0015\u0000\u0015\u0010\u0015\u0014} as string,",
						"          {\u0015\u0006\u0015\u0004\u0015\u0006\u0015\b\u001c\u0018\u0005india\u0018\u0005india\u0016\u0000(\u0005india\u0018\u0005india\u0000\u0000\u0000\b\u001c\u0002\u0000\u0000\u0000\u0003\u0007\u0000\u0003\u0015\u0000\u0015*\u0015.} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00003\u0015\u0000\u0015*\u0015.} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00003\u0015\u0000\u0015:\u0015:} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u0007payroll\u0018\u0002HR\u0000\u0000\u0000\u001d\u0014\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0006\u0004HR\u0001\u00060IT\u0007\u0000\u0000\u0000payroll\u0015\u0002\u0019|H\fspark_schema\u0015\f\u0000\u0015\f%\u0002\u0018\u0005empid%\u0000\u0000\u0015\f%\u0002\u0018\u0004name%\u0000\u0000\u0015\f%\u0002\u0018\u0006countr%\u0000\u0000\u0015\f%\u0002\u0018} as string",
						"     ),",
						"     partitionFileNames:['totalgroup.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/empinput')]",
				"[concat(variables('workspaceId'), '/datasets/depinput')]",
				"[concat(variables('workspaceId'), '/datasets/output')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_lab2_writecampaignanalyticstoasa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "asal400_campaign_analytics_source",
								"type": "DatasetReference"
							},
							"name": "CampaignAnalytics"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticstestTable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "MapCampaignAnalytics"
						},
						{
							"name": "ConvertColumnTypesAndValues"
						},
						{
							"name": "SelectCampaignAnalyticsColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {_col0_} as string,",
						"          {_col1_} as string,",
						"          {_col2_} as string,",
						"          {_col3_} as string,",
						"          {_col4_} as string,",
						"          {_col5_} as double,",
						"          {_col6_} as string,",
						"          {_col7_} as double,",
						"          {_col8_} as string,",
						"          {_col9_} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     skipLines: 1) ~> CampaignAnalytics",
						"CampaignAnalytics select(mapColumn(",
						"          Region = {_col0_},",
						"          Country = {_col1_},",
						"          ProductCategory = {_col2_},",
						"          CampaignName = {_col3_},",
						"          RevenuePart1 = {_col4_},",
						"          Revenue = {_col5_},",
						"          RevenueTargetPart1 = {_col6_},",
						"          RevenueTarget = {_col7_},",
						"          City = {_col8_},",
						"          State = {_col9_}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MapCampaignAnalytics",
						"MapCampaignAnalytics derive(Revenue = toDecimal(replace(concat(toString(RevenuePart1), toString(Revenue)), '\\\\', ''), 10, 2, '$###,###.##'),",
						"          RevenueTarget = toDecimal(replace(concat(toString(RevenueTargetPart1), toString(RevenueTarget)), '\\\\', ''), 10, 2, '$###,###.##')) ~> ConvertColumnTypesAndValues",
						"ConvertColumnTypesAndValues select(mapColumn(",
						"          Region,",
						"          Country,",
						"          ProductCategory,",
						"          CampaignName,",
						"          Revenue,",
						"          RevenueTarget,",
						"          City,",
						"          State",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCampaignAnalyticsColumns",
						"SelectCampaignAnalyticsColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/asal400_campaign_analytics_source')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseAnalyticstestTable1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/derived')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empinput",
								"type": "DatasetReference"
							},
							"name": "empdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          countr as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empdata",
						"empdata derive(countr = upper(countr),",
						"          newcountry = iifNull(countr, 'unknown', upper(countr))) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {PAR1\u0015\u0000\u0015*\u0015.} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00003\u0015\u0000\u0015B\u0015F} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u0004raju\u0018\u0005asmin\u0000\u0000\u0000!�\u0002\u0000\u0000\u0000\u0003\u0007\u0006\u0000\u0000\u0000maheer\u0005\u0000\u0000\u0000asmin\u0004\u0000\u0000\u0000raju\u0015\u0004\u0015\u0012\u0015\u0016L\u0015\u0002\u0015\u0004\u0000\u0000      \u0005\u0000\u0000\u0000india\u0015\u0000\u0015\u0010\u0015\u0014} as string,",
						"          {\u0015\u0006\u0015\u0004\u0015\u0006\u0015\b\u001c\u0018\u0005india\u0018\u0005india\u0016\u0000(\u0005india\u0018\u0005india\u0000\u0000\u0000\b\u001c\u0002\u0000\u0000\u0000\u0003\u0007\u0000\u0003\u0015\u0000\u0015*\u0015.} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00003\u0015\u0000\u0015*\u0015.} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u00013\u0018\u00011\u0000\u0000\u0000\u0015P\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0000\u0000\u00002\u0001\u0000\u0000\u00001\u0001\u0000\u0000\u00003\u0015\u0000\u0015:\u0015:} as string,",
						"          {\u0015\u0006\u0015\u0000\u0015\u0006\u0015\b\u001c6\u0000(\u0007payroll\u0018\u0002HR\u0000\u0000\u0000\u001d\u0014\u0002\u0000\u0000\u0000\u0003\u0007\u0001\u0006\u0004HR\u0001\u00060IT\u0007\u0000\u0000\u0000payroll\u0015\u0002\u0019|H\fspark_schema\u0015\f\u0000\u0015\f%\u0002\u0018\u0005empid%\u0000\u0000\u0015\f%\u0002\u0018\u0004name%\u0000\u0000\u0015\f%\u0002\u0018\u0006countr%\u0000\u0000\u0015\f%\u0002\u0018} as string",
						"     ),",
						"     partitionFileNames:['derivedout.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/empinput')]",
				"[concat(variables('workspaceId'), '/datasets/output')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Column Level Security')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": null,
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Data Warehouse Optimization')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": null,
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dynamic Data Masking')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": null,
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Row Level Security')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": null,
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE dbo.VehicleAverages\n( \n    [AverageEngineTemperature] [float] NOT  NULL,\n    [AverageSpeed] [float] NOT  NULL,\n    [Snapshot] [datetime] NOT  NULL\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    CLUSTERED COLUMNSTORE INDEX\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sql001",
						"poolName": "sql001"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [AverageEngineTemperature]\n,[AverageSpeed]\n,[Snapshot]\n FROM [dbo].[VehicleAverages]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sql001",
						"poolName": "sql001"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "select * from  [wwi].CampaignAnalytics\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sql001",
						"poolName": "sql001"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 4')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF (NOT EXISTS(SELECT * FROM sys.credentials WHERE name = 'asacosmosdbu6yr2x0'))\n    THROW 50000, 'As a prerequisite, create a credential with Azure Cosmos DB key in SECRET option:\n    CREATE CREDENTIAL [asacosmosdbu6yr2x0]\n    WITH IDENTITY = ''SHARED ACCESS SIGNATURE'', SECRET = ''<Enter your Azure Cosmos DB key here>''', 0\nGO\n\nSELECT TOP 100 *\nFROM OPENROWSET(​PROVIDER = 'CosmosDB',\n                CONNECTION = 'Account=asacosmosdbu6yr2x0;Database=CustomerProfile',\n                OBJECT = 'OnlineUserProfile01',\n                SERVER_CREDENTIAL = 'asacosmosdbu6yr2x0'\n) AS [OnlineUserProfile01]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 5')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [Region]\n,[Country]\n,[ProductCategory]\n,[CampaignName]\n,[Revenue]\n,[RevenueTarget]\n,[City]\n,[State]\n FROM [WWI].[CampaignAnalytics]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sqlpool01",
						"poolName": "sqlpool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 6')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE dbo.VehicleAverages\n( \n    [AverageEngineTemperature] [float] NOT  NULL,\n    [AverageSpeed] [float] NOT  NULL,\n    [Snapshot] [datetime] NOT  NULL\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    CLUSTERED COLUMNSTORE INDEX\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sqlpool01",
						"poolName": "sqlpool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 7')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [AverageEngineTemperature]\n,[AverageSpeed]\n,[Snapshot]\n FROM [dbo].[VehicleAverages]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sqlpool01",
						"poolName": "sqlpool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 9')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE dbo.table1\n(\nempid int not null,\nname nvarchar(20) not null,\ncountry nvarchar(10) not null,\ndepartment int not null\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    CLUSTERED COLUMNSTORE INDEX\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sqlpool01",
						"poolName": "sqlpool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a0abe341-1c0c-4b73-ba23-56ae4674f49a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"e56174c3-6a1d-4261-beea-2ee56e3a83c5": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [],
										"schema": [],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [],
											"seriesFieldKeys": [],
											"isStacked": false
										}
									}
								}
							},
							"3d540ea1-e315-4ab7-a183-310af7fb384c": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [],
										"schema": [],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [],
											"seriesFieldKeys": [],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/ab71788c-815f-4ff3-90c9-bf9db2e281cf/resourceGroups/data-engineering-synapse-u6yr2x0/providers/Microsoft.Synapse/workspaces/asaworkspaceu6yr2x0/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspaceu6yr2x0.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"# Read from Cosmos DB analytical store into a Spark DataFrame and display 10 rows from the DataFrame\n",
							"# To select a preferred list of regions in a multi-region Cosmos DB account, add .option(\"spark.cosmos.preferredRegions\", \"<Region1>,<Region2>\")\n",
							"\n",
							"df = spark.read\\\n",
							"    .format(\"cosmos.olap\")\\\n",
							"    .option(\"spark.synapse.linkedService\", \"CosmosDBLSCustomerProfile\")\\\n",
							"    .option(\"spark.cosmos.container\", \"OnlineUserProfile01\")\\\n",
							"    .load()\n",
							"\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"unwanted_cols = {'_attachments','_etag','_rid','_self','_ts','collectionType','id'}\r\n",
							"\r\n",
							"# Remove unwanted columns from the columns collection\r\n",
							"cols = list(set(df.columns) - unwanted_cols)\r\n",
							"\r\n",
							"profiles = df.select(cols)\r\n",
							"\r\n",
							"display(profiles.limit(10))"
						],
						"outputs": [],
						"execution_count": 2
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 2')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d9532a48-7fde-4f7a-ba0c-3e98109ced39"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"c20f63c4-2578-4b89-af4c-32376f9483de": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "V15fAIjtqtgBAAAAAAAAAA==",
												"1": "1677254396",
												"2": "93353",
												"3": "8470e448-1c05-44f6-8a38-65f4addae632",
												"4": [
													3525,
													2055,
													1497
												],
												"5": [],
												"6": "abb7d794-2bd8-4f62-b61c-21601315c87b",
												"7": "\"2e01f773-0000-0c00-0000-63f8defb0000\""
											},
											{
												"0": "V15fAIjtqtgCAAAAAAAAAA==",
												"1": "1677254396",
												"2": "95322",
												"3": "1951025c-8ec8-4844-9383-0b511026e1fb",
												"4": [
													1526,
													2889,
													1713,
													4270,
													1359,
													3319,
													1852,
													4413,
													3659
												],
												"5": [],
												"6": "d73e1462-a09d-4c1c-911a-e9e7d5880bbf",
												"7": "\"2e01f873-0000-0c00-0000-63f8defb0000\""
											},
											{
												"0": "V15fAIjtqtgDAAAAAAAAAA==",
												"1": "1677254396",
												"2": "96331",
												"3": "4506402c-33ee-4c76-95e1-f6c543bc4285",
												"4": [],
												"5": [
													{
														"productId": 3501,
														"reviewText": "My neighbor Fannie has one of these. She works as a teacher and she says it looks spiky.",
														"reviewDate": "2020-03-16T22:15:38.496486+00:00"
													},
													{
														"productId": 4492,
														"reviewText": "It only works when I'm Bahrain.",
														"reviewDate": "2016-08-07T12:41:15.5865158+00:00"
													},
													{
														"productId": 4246,
														"reviewText": "one of my hobbies is spearfishing. and when i'm spearfishing this works great.",
														"reviewDate": "2017-07-19T18:40:45.7123398+00:00"
													},
													{
														"productId": 4489,
														"reviewText": "heard about this on mbube radio, decided to give it a try.",
														"reviewDate": "2020-01-22T13:05:53.4752799+00:00"
													},
													{
														"productId": 4712,
														"reviewText": "I tried to nail it but got strawberry all over it.",
														"reviewDate": "2016-06-09T04:16:56.8830035+00:00"
													}
												],
												"6": "0d2db82b-5cae-4adb-a476-c725ccaff06a",
												"7": "\"2e01f973-0000-0c00-0000-63f8defb0000\""
											},
											{
												"0": "V15fAIjtqtgGAAAAAAAAAA==",
												"1": "1677254396",
												"2": "94292",
												"3": "c122425c-e988-423a-91d6-39b658b6e43c",
												"4": [
													4676,
													2707,
													4563,
													956
												],
												"5": [],
												"6": "fb3219a6-0f0d-48b8-a620-c142f9004d15",
												"7": "\"2e01fc73-0000-0c00-0000-63f8defb0000\""
											},
											{
												"0": "V15fAIjtqtgHAAAAAAAAAA==",
												"1": "1677254396",
												"2": "95230",
												"3": "e07aefca-1818-4bc6-8808-d601784883e4",
												"4": [
													44,
													1430
												],
												"5": [
													{
														"productId": 4966,
														"reviewText": "I saw one of these in New Zealand and I bought one.",
														"reviewDate": "2017-08-31T06:10:22.0298946+00:00"
													},
													{
														"productId": 3966,
														"reviewText": "My neighbor Forest has one of these. She works as a gardener and she says it looks nude.",
														"reviewDate": "2017-06-20T08:28:37.3433185+00:00"
													},
													{
														"productId": 4041,
														"reviewText": "heard about this on timba radio, decided to give it a try.",
														"reviewDate": "2017-10-25T22:29:06.7611488+00:00"
													},
													{
														"productId": 4696,
														"reviewText": "This compelling works quite well. It pointedly improves my golf by a lot.",
														"reviewDate": "2016-11-14T01:03:38.8032112+00:00"
													},
													{
														"productId": 3241,
														"reviewText": "i use it for 10 weeks when i'm in my sauna.",
														"reviewDate": "2019-06-17T14:31:03.3518464+00:00"
													}
												],
												"6": "97340581-5e8d-4516-b2f4-3f888c3ec242",
												"7": "\"2e01fd73-0000-0c00-0000-63f8defb0000\""
											},
											{
												"0": "V15fAIjtqtgJAAAAAAAAAA==",
												"1": "1677254396",
												"2": "95199",
												"3": "28e06e51-9b37-462b-8a7f-8c9ecbb577e6",
												"4": [
													1120,
													4060
												],
												"5": [
													{
														"productId": 2629,
														"reviewText": "I saw one of these in The Gambia and I bought one.",
														"reviewDate": "2017-03-25T15:24:29.3853281+00:00"
													},
													{
														"productId": 1868,
														"reviewText": "My tiger loves to play with it.",
														"reviewDate": "2019-12-31T09:32:57.4177757+00:00"
													},
													{
														"productId": 4218,
														"reviewText": "It only works when I'm Juan de Nova Island.",
														"reviewDate": "2019-10-23T00:18:43.0661199+00:00"
													}
												],
												"6": "59f02317-5f4d-4525-afa6-da144ec503c4",
												"7": "\"2e01ff73-0000-0c00-0000-63f8defb0000\""
											},
											{
												"0": "V15fAIjtqtgKAAAAAAAAAA==",
												"1": "1677254396",
												"2": "98300",
												"3": "173e9f12-580e-4511-a2c5-8224e2c5c901",
												"4": [
													3605,
													2214,
													3558,
													676
												],
												"5": [
													{
														"productId": 1804,
														"reviewText": "talk about hatred.",
														"reviewDate": "2017-05-16T18:49:18.1369047+00:00"
													},
													{
														"productId": 1134,
														"reviewText": "The box this comes in is 3 kilometer by 5 inch and weights 13 ton.",
														"reviewDate": "2016-10-05T20:29:51.9651895+00:00"
													},
													{
														"productId": 2246,
														"reviewText": "i use it on Mondays when i'm in my fort.",
														"reviewDate": "2018-03-23T04:02:53.808249+00:00"
													}
												],
												"6": "9314e717-8727-4736-b591-4b6a840d84f9",
												"7": "\"2e010074-0000-0c00-0000-63f8defb0000\""
											},
											{
												"0": "V15fAIjtqtgMAAAAAAAAAA==",
												"1": "1677254396",
												"2": "93173",
												"3": "b038fa32-7fb9-4d42-993c-228d31d4f30c",
												"4": [],
												"5": [
													{
														"productId": 4127,
														"reviewText": "My bass loves to play with it.",
														"reviewDate": "2018-01-21T21:07:53.793818+00:00"
													},
													{
														"productId": 662,
														"reviewText": "This Steel works so well. It delightedly improves my football by a lot.",
														"reviewDate": "2018-01-20T14:40:38.3150583+00:00"
													},
													{
														"productId": 530,
														"reviewText": "I tried to shred it but got watermelon all over it.",
														"reviewDate": "2017-08-27T00:41:52.1649453+00:00"
													}
												],
												"6": "ffbad299-6e2e-478d-a2cb-0fbb86160643",
												"7": "\"2e010274-0000-0c00-0000-63f8defb0000\""
											},
											{
												"0": "V15fAIjtqtgPAAAAAAAAAA==",
												"1": "1677254396",
												"2": "96182",
												"3": "eccdd1a7-6bf6-4a06-b925-0be37426aa57",
												"4": [
													820,
													1800,
													1257,
													3504,
													308,
													1321,
													4562,
													2689,
													4909
												],
												"5": [
													{
														"productId": 1214,
														"reviewText": "My co-worker Houston has one of these. He says it looks invisible.",
														"reviewDate": "2019-02-05T08:44:52.103781+00:00"
													}
												],
												"6": "4fb7d9be-6081-444d-8cb6-cbb425bc1978",
												"7": "\"2e010574-0000-0c00-0000-63f8defb0000\""
											},
											{
												"0": "V15fAIjtqtgRAAAAAAAAAA==",
												"1": "1677254396",
												"2": "97164",
												"3": "482a5c2b-d884-4fce-ba2d-1702972cf518",
												"4": [
													4369,
													5000,
													1157,
													4756
												],
												"5": [
													{
														"productId": 4874,
														"reviewText": "talk about sadness.",
														"reviewDate": "2016-09-15T10:11:42.0100913+00:00"
													},
													{
														"productId": 4994,
														"reviewText": "This France works so well. It hungrily improves my basketball by a lot.",
														"reviewDate": "2018-12-16T12:55:14.7373001+00:00"
													},
													{
														"productId": 3698,
														"reviewText": "heard about this on brazilian radio, decided to give it a try.",
														"reviewDate": "2018-11-05T05:58:06.8574343+00:00"
													},
													{
														"productId": 4526,
														"reviewText": "heard about this on mbube radio, decided to give it a try.",
														"reviewDate": "2016-07-11T07:08:08.4393051+00:00"
													},
													{
														"productId": 1471,
														"reviewText": "The box this comes in is 3 yard by 6 light-year and weights 15 gram!!!",
														"reviewDate": "2016-10-19T20:21:43.0949673+00:00"
													}
												],
												"6": "f0dbc10f-a171-4ac1-a71d-305695c3dee1",
												"7": "\"2e010774-0000-0c00-0000-63f8defb0000\""
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "_rid",
												"type": "string"
											},
											{
												"key": "1",
												"name": "_ts",
												"type": "bigint"
											},
											{
												"key": "2",
												"name": "userId",
												"type": "bigint"
											},
											{
												"key": "3",
												"name": "cartId",
												"type": "string"
											},
											{
												"key": "4",
												"name": "preferredProducts",
												"type": "ArrayType(LongType,true)"
											},
											{
												"key": "5",
												"name": "productReviews",
												"type": "ArrayType(StructType(StructField(productId,LongType,true), StructField(reviewText,StringType,true), StructField(reviewDate,StringType,true)),true)"
											},
											{
												"key": "6",
												"name": "id",
												"type": "string"
											},
											{
												"key": "7",
												"name": "_etag",
												"type": "string"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"1"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/ab71788c-815f-4ff3-90c9-bf9db2e281cf/resourceGroups/data-engineering-synapse-u6yr2x0/providers/Microsoft.Synapse/workspaces/asaworkspaceu6yr2x0/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspaceu6yr2x0.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"# Read from Cosmos DB analytical store into a Spark DataFrame and display 10 rows from the DataFrame\n",
							"# To select a preferred list of regions in a multi-region Cosmos DB account, add .option(\"spark.cosmos.preferredRegions\", \"<Region1>,<Region2>\")\n",
							"\n",
							"df = spark.read\\\n",
							"    .format(\"cosmos.olap\")\\\n",
							"    .option(\"spark.synapse.linkedService\", \"CosmosDBLSCustomerProfile\")\\\n",
							"    .option(\"spark.cosmos.container\", \"OnlineUserProfile01\")\\\n",
							"    .load()\n",
							"\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 5
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 3')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "7de615e7-37ea-4ac8-a791-65687e1f606c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/ab71788c-815f-4ff3-90c9-bf9db2e281cf/resourceGroups/data-engineering-synapse-u6yr2x0/providers/Microsoft.Synapse/workspaces/asaworkspaceu6yr2x0/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspaceu6yr2x0.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"import uuid\r\n",
							"\r\n",
							"# Generate random GUID\r\n",
							"runId = uuid.uuid4()"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"topPurchases.write.parquet('abfss://wwi-02@asadatalakeu6yr2x0.dfs.core.windows.net/' + str(runId) + '.parquet')"
						],
						"outputs": [],
						"execution_count": 17
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 4')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "db7a2a7b-eca2-420a-82ec-b0118642de51"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"8a3c3d42-2f14-4d88-a745-6b73481a1fec": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "3e280434-9d5f-4245-8601-84cee1f34c2d",
												"1": "102449",
												"2": "3173",
												"3": 2,
												"4": "26.470000000000000000",
												"5": "52.940000000000000000",
												"6": "20100102",
												"7": "19.480000000000000000",
												"8": 4,
												"9": 54,
												"10": "1021"
											},
											{
												"0": "3e280434-9d5f-4245-8601-84cee1f34c2d",
												"1": "102449",
												"2": "2686",
												"3": 1,
												"4": "21.460000000000000000",
												"5": "21.460000000000000000",
												"6": "20100102",
												"7": "6.010000000000000000",
												"8": 4,
												"9": 54,
												"10": "1021"
											},
											{
												"0": "3e280434-9d5f-4245-8601-84cee1f34c2d",
												"1": "102449",
												"2": "2335",
												"3": 3,
												"4": "16.650000000000000000",
												"5": "49.950000000000000000",
												"6": "20100102",
												"7": "13.830000000000000000",
												"8": 4,
												"9": 54,
												"10": "1021"
											},
											{
												"0": "3e280434-9d5f-4245-8601-84cee1f34c2d",
												"1": "102449",
												"2": "337",
												"3": 3,
												"4": "24.180000000000000000",
												"5": "72.540000000000000000",
												"6": "20100102",
												"7": "22.200000000000000000",
												"8": 4,
												"9": 54,
												"10": "1021"
											},
											{
												"0": "3e280434-9d5f-4245-8601-84cee1f34c2d",
												"1": "102449",
												"2": "1706",
												"3": 4,
												"4": "19.220000000000000000",
												"5": "76.880000000000000000",
												"6": "20100102",
												"7": "20.200000000000000000",
												"8": 4,
												"9": 54,
												"10": "1021"
											},
											{
												"0": "3e280434-9d5f-4245-8601-84cee1f34c2d",
												"1": "102449",
												"2": "2388",
												"3": 2,
												"4": "25.920000000000000000",
												"5": "51.840000000000000000",
												"6": "20100102",
												"7": "19.080000000000000000",
												"8": 4,
												"9": 54,
												"10": "1021"
											},
											{
												"0": "3e280434-9d5f-4245-8601-84cee1f34c2d",
												"1": "102449",
												"2": "7",
												"3": 4,
												"4": "21.440000000000000000",
												"5": "85.760000000000000000",
												"6": "20100102",
												"7": "28.320000000000000000",
												"8": 4,
												"9": 54,
												"10": "1021"
											},
											{
												"0": "3e280434-9d5f-4245-8601-84cee1f34c2d",
												"1": "102449",
												"2": "78",
												"3": 4,
												"4": "29.420000000000000000",
												"5": "117.680000000000000000",
												"6": "20100102",
												"7": "38.840000000000000000",
												"8": 4,
												"9": 54,
												"10": "1021"
											},
											{
												"0": "3e280434-9d5f-4245-8601-84cee1f34c2d",
												"1": "102449",
												"2": "171",
												"3": 3,
												"4": "24.500000000000000000",
												"5": "73.500000000000000000",
												"6": "20100102",
												"7": "24.930000000000000000",
												"8": 4,
												"9": 54,
												"10": "1021"
											},
											{
												"0": "e3f79ed3-dd26-429c-b2bc-11fa4ffd8604",
												"1": "519400",
												"2": "1847",
												"3": 1,
												"4": "23.150000000000000000",
												"5": "23.150000000000000000",
												"6": "20100102",
												"7": "6.470000000000000000",
												"8": 3,
												"9": 49,
												"10": "6321"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "CustomerId",
												"type": "int"
											},
											{
												"key": "2",
												"name": "ProductId",
												"type": "smallint"
											},
											{
												"key": "3",
												"name": "Quantity",
												"type": "tinyint"
											},
											{
												"key": "4",
												"name": "Price",
												"type": "decimal"
											},
											{
												"key": "5",
												"name": "TotalAmount",
												"type": "decimal"
											},
											{
												"key": "6",
												"name": "TransactionDate",
												"type": "int"
											},
											{
												"key": "7",
												"name": "ProfitAmount",
												"type": "decimal"
											},
											{
												"key": "8",
												"name": "Hour",
												"type": "tinyint"
											},
											{
												"key": "9",
												"name": "Minute",
												"type": "tinyint"
											},
											{
												"key": "10",
												"name": "StoreId",
												"type": "smallint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"1"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/ab71788c-815f-4ff3-90c9-bf9db2e281cf/resourceGroups/data-engineering-synapse-u6yr2x0/providers/Microsoft.Synapse/workspaces/asaworkspaceu6yr2x0/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspaceu6yr2x0.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://wwi-02@asadatalakeu6yr2x0.dfs.core.windows.net/sale-small/Year=2016/Quarter=Q3/Month=9/Day=20160930/sale-small-20160930-snappy.parquet', format='parquet')\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"topPurchases = df.select(\r\n",
							"    \"CustomerId\", \"ProductId\",\r\n",
							"    \"Quantity\")\r\n",
							"\r\n",
							"# Populate a temporary view so we can query from SQL\r\n",
							"topPurchases.createOrReplaceTempView(\"top_purchases\")\r\n",
							"\r\n",
							"topPurchases.show(10)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import uuid\r\n",
							"\r\n",
							"# Generate random GUID\r\n",
							"runId = uuid.uuid4()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"topPurchases.write.parquet('abfss://wwi-02@asadatalakeu6yr2x0.dfs.core.windows.net/wwi-02/folder/' + str(runId) + '.parquet')"
						],
						"outputs": [],
						"execution_count": 5
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 5')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "987a401e-fd66-481a-939a-2ee03d2f5351"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"1db9a6eb-fd0c-4db5-8ce4-19b6f2939515": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "3e280434-9d5f-4245-8601-84cee1f34c2d",
												"1": "102449",
												"2": "3173",
												"3": 2,
												"4": "26.470000000000000000",
												"5": "52.940000000000000000",
												"6": "20100102",
												"7": "19.480000000000000000",
												"8": 4,
												"9": 54,
												"10": "1021"
											},
											{
												"0": "3e280434-9d5f-4245-8601-84cee1f34c2d",
												"1": "102449",
												"2": "2686",
												"3": 1,
												"4": "21.460000000000000000",
												"5": "21.460000000000000000",
												"6": "20100102",
												"7": "6.010000000000000000",
												"8": 4,
												"9": 54,
												"10": "1021"
											},
											{
												"0": "3e280434-9d5f-4245-8601-84cee1f34c2d",
												"1": "102449",
												"2": "2335",
												"3": 3,
												"4": "16.650000000000000000",
												"5": "49.950000000000000000",
												"6": "20100102",
												"7": "13.830000000000000000",
												"8": 4,
												"9": 54,
												"10": "1021"
											},
											{
												"0": "3e280434-9d5f-4245-8601-84cee1f34c2d",
												"1": "102449",
												"2": "337",
												"3": 3,
												"4": "24.180000000000000000",
												"5": "72.540000000000000000",
												"6": "20100102",
												"7": "22.200000000000000000",
												"8": 4,
												"9": 54,
												"10": "1021"
											},
											{
												"0": "3e280434-9d5f-4245-8601-84cee1f34c2d",
												"1": "102449",
												"2": "1706",
												"3": 4,
												"4": "19.220000000000000000",
												"5": "76.880000000000000000",
												"6": "20100102",
												"7": "20.200000000000000000",
												"8": 4,
												"9": 54,
												"10": "1021"
											},
											{
												"0": "3e280434-9d5f-4245-8601-84cee1f34c2d",
												"1": "102449",
												"2": "2388",
												"3": 2,
												"4": "25.920000000000000000",
												"5": "51.840000000000000000",
												"6": "20100102",
												"7": "19.080000000000000000",
												"8": 4,
												"9": 54,
												"10": "1021"
											},
											{
												"0": "3e280434-9d5f-4245-8601-84cee1f34c2d",
												"1": "102449",
												"2": "7",
												"3": 4,
												"4": "21.440000000000000000",
												"5": "85.760000000000000000",
												"6": "20100102",
												"7": "28.320000000000000000",
												"8": 4,
												"9": 54,
												"10": "1021"
											},
											{
												"0": "3e280434-9d5f-4245-8601-84cee1f34c2d",
												"1": "102449",
												"2": "78",
												"3": 4,
												"4": "29.420000000000000000",
												"5": "117.680000000000000000",
												"6": "20100102",
												"7": "38.840000000000000000",
												"8": 4,
												"9": 54,
												"10": "1021"
											},
											{
												"0": "3e280434-9d5f-4245-8601-84cee1f34c2d",
												"1": "102449",
												"2": "171",
												"3": 3,
												"4": "24.500000000000000000",
												"5": "73.500000000000000000",
												"6": "20100102",
												"7": "24.930000000000000000",
												"8": 4,
												"9": 54,
												"10": "1021"
											},
											{
												"0": "e3f79ed3-dd26-429c-b2bc-11fa4ffd8604",
												"1": "519400",
												"2": "1847",
												"3": 1,
												"4": "23.150000000000000000",
												"5": "23.150000000000000000",
												"6": "20100102",
												"7": "6.470000000000000000",
												"8": 3,
												"9": 49,
												"10": "6321"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "CustomerId",
												"type": "int"
											},
											{
												"key": "2",
												"name": "ProductId",
												"type": "smallint"
											},
											{
												"key": "3",
												"name": "Quantity",
												"type": "tinyint"
											},
											{
												"key": "4",
												"name": "Price",
												"type": "decimal"
											},
											{
												"key": "5",
												"name": "TotalAmount",
												"type": "decimal"
											},
											{
												"key": "6",
												"name": "TransactionDate",
												"type": "int"
											},
											{
												"key": "7",
												"name": "ProfitAmount",
												"type": "decimal"
											},
											{
												"key": "8",
												"name": "Hour",
												"type": "tinyint"
											},
											{
												"key": "9",
												"name": "Minute",
												"type": "tinyint"
											},
											{
												"key": "10",
												"name": "StoreId",
												"type": "smallint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"1"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/ab71788c-815f-4ff3-90c9-bf9db2e281cf/resourceGroups/data-engineering-synapse-u6yr2x0/providers/Microsoft.Synapse/workspaces/asaworkspaceu6yr2x0/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspaceu6yr2x0.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://wwi-02@asadatalakeu6yr2x0.dfs.core.windows.net/sale-small/Year=2016/Quarter=Q3/Month=9/Day=20160930/sale-small-20160930-snappy.parquet', format='parquet')\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 3
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 6')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "0e329b18-da85-4494-93cc-10b4dfb2d71e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkPool01')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 4,
					"minNodeCount": 3
				},
				"nodeCount": 0,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "2.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "northeurope"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sql001')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "northeurope"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "northeurope"
		}
	]
}